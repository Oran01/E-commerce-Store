"use server";
import db from "@/db/db";

/**
 * Retrieves the total sales per day for the last 30 days.
 *
 * @returns - A list of objects, each containing:
 *   - `date` (string) in the format YYYY-MM-DD
 *   - `total` (number) representing the total sales amount in dollars for that date
 */
export async function getSalesTrends() {
  const sales = await db.order.findMany({
    select: {
      createAt: true, // Date of order
      pricePaidInCents: true, // Total amount paid
    },
    orderBy: { createAt: "asc" }, // Sort by date
  });

  // Group sales data by date
  const salesData: { date: string; total: number }[] = [];

  sales.forEach((sale) => {
    const date = sale.createAt.toISOString().split("T")[0]; // Convert to YYYY-MM-DD
    const existing = salesData.find((d) => d.date === date);
    if (existing) {
      existing.total += sale.pricePaidInCents / 100; // Convert cents to dollars
    } else {
      salesData.push({ date, total: sale.pricePaidInCents / 100 });
    }
  });

  return salesData;
}

/**
 * Retrieves the top-selling products based on the number of orders.
 *
 * @returns - A list of objects, each containing:
 *   - `name` (string) - The product name
 *   - `sales` (number) - The total number of sales (orders) for the product
 */
export async function getTopSellingProducts() {
  const products = await db.product.findMany({
    select: {
      name: true,
      _count: { select: { orders: true } }, // Count number of orders per product
    },
    orderBy: { orders: { _count: "desc" } },
    take: 5, // Get top 5 products
  });

  return products.map((product) => ({
    name: product.name,
    sales: product._count.orders, // Total number of sales
  }));
}

/**
 * Retrieves total revenue generated by each product.
 *
 * @returns - A list of objects, each containing:
 *   - `name` (string) - The product name
 *   - `revenue` (number) - The total revenue in dollars
 */
export async function getRevenueByProduct() {
  const revenueData = await db.order.groupBy({
    by: ["productId"],
    _sum: { pricePaidInCents: true },
  });

  // Fetch product names based on productId
  const productNames = await db.product.findMany({
    where: { id: { in: revenueData.map((r) => r.productId) } },
    select: { id: true, name: true },
  });

  // Map product names to revenue data, handling null values
  return revenueData.map((data) => ({
    name: productNames.find((p) => p.id === data.productId)?.name || "Unknown",
    revenue: (data._sum.pricePaidInCents ?? 0) / 100, // Convert cents to dollars, default to 0 if null
  }));
}
